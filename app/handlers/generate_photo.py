from telebot import types
import os
import sys

sys.path.append(os.getcwd())
import get_photo

def register_photo_handlers(bot):
    @bot.message_handler(func=lambda m: m.text == 'üì∑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ')
    def choose_pattern(message):
        patterns_dir = 'patterns'
        pattern_files = [f for f in os.listdir(patterns_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

        if not pattern_files:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        msg_text = "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω\n\n"
        
        for idx, pattern in enumerate(pattern_files, start=1):
            msg_text += f"{idx}: {pattern[:-3]}\n"

        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [types.InlineKeyboardButton(str(i), callback_data=f"pattern_{i-1}") 
                   for i in range(1, len(pattern_files)+1)]
        markup.add(*buttons)

        bot.send_message(message.chat.id, msg_text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('pattern_'))
    def handle_pattern_choice(call):
        
        status_msg = bot.send_message(call.from_user.id, "üß¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ...")
        index = int(call.data.split('_')[1])
        patterns_dir = 'patterns'
        pattern_files = [f for f in os.listdir(patterns_dir)]
        user_id = call.from_user.id
        
        if index >= len(pattern_files):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
            return

        selected_pattern = pattern_files[index]
        bot.answer_callback_query(call.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_pattern}")

        json_path = os.path.join('temp', 'result.json')
        if not os.path.exists(json_path):
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            photo_path, first_msg = get_photo.main(
                user_id=user_id,
                pattern=os.path.splitext(selected_pattern)[0],
                file=json_path
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            with open(photo_path, 'rb') as photo:
                bot.send_document(user_id, photo, caption=f"üéâ –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n‚ú® –í–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n'{first_msg}'")

        except Exception as e:
            print(e)
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        finally:
            try:
                bot.delete_message(user_id, status_msg.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

            if os.path.exists(photo_path):
                os.remove(photo_path)
            # if os.path.exists(json_path):
            #     os.remove(json_path